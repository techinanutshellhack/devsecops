pipeline{
    agent any
    environment {
        SONAR_TOKEN = credentials('sonarqube-jenkins')
    }

    tools{
        jdk 'jdk17'
        terraform 'terraform'
        nodejs 'node16'
    }
    stages{
        stage('clean Workspace'){
            steps{
                cleanWs()
            }
        }
        stage('checkout from Git'){
            steps{
                git branch: 'main', url: 'https://github.com/techinanutshellhack/devsecops.git'
            }
        }
        stage('Build') {
            steps {
                // Install dependencies and build your Node.js project
                sh 'npm install'
                sh 'npm run build'
            }
        }
        stage('Terraform version'){
             steps{
                 sh 'terraform --version'
                }
        }
        stage("Sonarqube Analysis "){
            steps{
                // withSonarQubeEnv('sonar-server') {
                //     sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Terraform \
                //     -Dsonar.projectKey=Terraform '''
                    // Execute SonarCloud analysis
                  withSonarQubeEnv('SonarCloud') {
                    sh 'npm install -g sonarqube-scanner'
                    sh 'sonar-scanner \
                        -Dsonar.projectKey=techinanutshell \
                        -Dsonar.organization=techinanutshell \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=https://sonarcloud.io \
                        -Dsonar.login=${SONAR_TOKEN}'
                }
            }
        }
        stage("quality gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonarqube-jenkins' 
                }
            } 
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
        stage("Docker Build & Push"){
            steps{
                script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){   
                       sh "docker build -t tetrisv1 ."
                       sh "docker tag tetrisv1 sweetpeaito/tetrisv1:latest "
                       sh "docker push sweetpeaito/tetrisv1:latest "
                    }
                }
            }
        }
        stage("TRIVY"){
            steps{
                sh "trivy image sweetpeaito/tetrisv1:latest > trivyimage.txt" 
            }
        }
        // stage('Excutable permission to userdata'){
        //     steps{
        //         sh 'chmod 777 website.sh'
        //     }
        // }
        // stage('Terraform init'){
        //     steps{
        //         sh 'terraform init'
        //     }
        // }
        // stage('Terraform plan'){
        //     steps{
        //         sh 'terraform plan'
        //     }
        // }
        // stage('Terraform apply'){
        //     steps{
        //         sh 'terraform ${action} --auto approve'
        //     }
        // }
    }
}